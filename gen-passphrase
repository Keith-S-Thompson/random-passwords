#!/usr/bin/perl

# Copyright (C) 2021 Keith Thompson

# This file is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

use strict;
use warnings;

use Getopt::Long ();
use Pod::Usage ();
use Math::BigInt ();
use Math::BigFloat ();

my $default_dictionary = '/usr/share/dict/words';
my %opt = (suffix => 1);
if (defined $ENV{PASSPHRASE_DICT}) {
    $opt{dictionary} = $ENV{PASSPHRASE_DICT};
}
else {
    $opt{dictionary} = $default_dictionary;
}
Getopt::Long::GetOptions(
    \%opt,
    qw( help|hel|he|h!
        help1!
        help2!
        man!

        suffix!
        verbose!
        dictionary=s
        dev-random!
        debugging!
    )
) or Pod::Usage::pod2usage(-verbose => 0, -exitvalue => 2);
Pod::Usage::pod2usage(-verbose => 2, -exitvalue => 0) if $opt{man};
Pod::Usage::pod2usage(-verbose => 2, -exitvalue => 0, -perldocopt, '-T -t') if $opt{help2};
Pod::Usage::pod2usage(-verbose => 1, -exitvalue => 0) if $opt{help1};
Pod::Usage::pod2usage(-verbose => 0, -exitvalue => 0) if $opt{help};

if (not (scalar @ARGV == 3 and
         ($ARGV[0] =~ /^[a-z]+$/ or $ARGV[0] =~ /^\d+$/) and
         $ARGV[1] =~ /^\d+$/ and
         $ARGV[2] =~ /^\d+$/))
{
    Pod::Usage::pod2usage(-verbose => 0, -exitvalue => 0);
}

my($selector, $min_len, $max_len) = @ARGV;
if ($max_len < $min_len) {
    Pod::Usage::pod2usage(-message => "max_len must be >= min_len", -verbose => 0, -exitvalue => 1);
}

my $use_initials = ($selector =~ /^[a-z]+$/);

my @words = ();

#
# Slurp all lowercase words from the dictionary file into an array.
#
open my $DICT, '<', $opt{dictionary} or die "$opt{dictionary}: $!\n";
while (<$DICT>) {
    chomp;
    s/\r$//;
    next if not /^[a-z]+$/;
    next if not $opt{suffix} and /(s|ed|ing)$/;
    push @words, $_;
}
close $DICT or die "$opt{dictionary}: $!\n";

my @passphrase = ();

my @counts = ();
my @errors = ();

my $stats = '';

my $device = $opt{'dev-random'} ? '/dev/random' : '/dev/urandom';
debug("Reading from $device\n");
open my $DEVICE, '<', $device or die "${device}: $!\n";

#
# Generate the passphrase
#
if ($use_initials) {
    #
    # The first program argument gives the initials of the generated
    # passphrase.
    #
    foreach my $initial (split //, $selector) {
        my @candidates = words($initial, $min_len, $max_len);
        my $s = scalar @candidates == 1 ? '' : 's';
        if (@candidates) {
            push @counts, scalar @candidates;
            my $index = random(scalar @candidates, $DEVICE);
            push @passphrase, $candidates[$index];

        }
        else {
            my $len = $min_len;
            $len .= "..$max_len" if $max_len > $min_len;
            push @errors, "No words starting with '$initial' with $len letters\n";
        }
    }
}
else {
    #
    # The first program argument gives the number of words.
    #
    my @candidates = words(undef, $min_len, $max_len);
    my $s = scalar @candidates == 1 ? '' : 's';
    @counts = (scalar @candidates) x $selector;
    if (@candidates) {
        for (1 .. $selector) {
            my $index = random(scalar @candidates, $DEVICE);
            push @passphrase, $candidates[$index];
        }
    }
    else {
        my $len = $min_len;
        $len .= "..$max_len" if $max_len > $min_len;
        push @errors, "No words with $len letters\n";
    }
}

close $DEVICE or die "${device}: $!\n";

if (@errors) {
    die @errors;
}

print "@passphrase\n";
if ($opt{verbose}) {
    if ($use_initials) {
        $stats .= "    " . join(' * ', @counts) . "\n";
    }
    else {
        $stats .= "    " . $counts[0] . "**" . $selector . "\n";
    }
    my $possibilities = Math::BigInt->new(1);
    foreach my $count (@counts) {
        $possibilities *= $count;
    }
    my $f_possibilities = Math::BigFloat->new($possibilities);
    $stats .= "    " . image($possibilities) . " possibilities, equivalent to:\n";
    my $log_possibilities = log($f_possibilities);
    $stats .= sprintf "    %.2f random bits\n" .
                      "    %.2f random lowercase letters\n" .
                      "    %.2f random mixed-case alphanumerics\n" .
                      "    %.2f random printable ASCII characters\n",
                      $log_possibilities / log(2),
                      $log_possibilities / log(26), # a-z
                      $log_possibilities / log(62), # a-zA-Z0-9
                      $log_possibilities / log(94); # !-~
    print $stats;
}

# ----------------------------------------------------------------------

#
# random($upper, $DEVICE) returns a random number in the range 0 .. $upper-1
# $DEVICE is a file handle already opened to /dev/urandom or /dev/random
#
sub random {
    my($upper, $DEVICE) = @_;
    my $buf;
    my $short_bound = 2**16;
    my $value_bound = $short_bound - ($short_bound % $upper);
    my $value;

    # Values read from the device will be in the range 0 .. $short_bound-1
    # (0..65535).  Repeat if necessary to get a value in the range
    # 0..$value_bound-1, which is computed to avoid bias; the number of possible
    # values read is a multiple of $upper.

    #
    # Read 2 bytes from device.
    # Discard high values to avoid bias.
    #
    do {
        my $bytes_read = read $DEVICE, $buf, 2;
        die "Failed to read from $device\n" if $bytes_read != 2;
        $value = unpack 'S', $buf;
        debugf("Read value 0x%04x\n", $value);
    } while $value >= $value_bound;

    my $result = $value % $upper;
    debugf("random: 0x%04x %% %d --> %d\n",
           $value, $upper, $result);
    return $result;
}

#
# Returns a list of words satisfying the specified criteria
#
sub words {
    my($initial, $min_len, $max_len) = @_;
    return grep { (defined $initial ? substr($_, 0, 1) eq $initial : 1) and
                  length $_ >= $min_len and
                  length $_ <= $max_len } @words;
}

#
# Insert commas into a string, e.g., "1234567" --> "1,234,567"
#
sub comma {
    my($arg) = @_;
    my($num) = sprintf "%.0f", $arg;
    $num = reverse $num;
    $num =~ s/.../$&,/g;
    $num = reverse $num;
    $num =~ s/^,//;
    return $num;
}

sub image {
    my($num) = @_;
    if ($num < 10_000) {
        return $num;
    }
    elsif ($num < 1e9) {
        return comma $num;
    }
    else {
        $num = Math::BigFloat->new($num);
        my $exp = int($num->copy()->blog(10));
        my $digits = substr($num->bstr(), 0, 5);
        $digits =~ s/^./$&./;
        return "${digits}e$exp";
    }
}

sub debug {
    my(@message) = @_;
    print @message if $opt{debugging};
    return;
}

sub debugf {
    my(@message) = @_;
    printf @message if $opt{debugging};
    return;
}

__END__

=head1 NAME

gen-passphrase - Generate random passphrases

=head1 SYNOPSIS

gen-passphrase [options] initials|word-count min-len max-len

 Options:
    -help|-help1|-help2  Show short|medium|long usage message
    -man                 Show long usage message (invokes pager)

    -[no]suffix       Allow/disallow words ending in s, ed, ing (enabled by default)
    -verbose          Show statistics about the strength of the passphrase
    -dictionary file  Use specified word list
                      Default is /usr/share/dict/words or $PASSPHRASE_DICT
    -dev-random       Use /dev/random rather than /dev/urandom (slow)
    -debugging        Produce debugging output (developer option)

=head1 DESCRIPTION

B<gen-passphrase> generates random passphrases.

It is part of the B<random-passwords> package, available at

L<https://github.com/Keith-S-Thompson/random-passwords>

More documentation is available there.

B<gen-passphrase> was partly inspired by this XKCD cartoon: L<http://xkcd.com/936/>,
which suggests using long passphrases consisting of randomly selected
English words.  The example in the cartoon was "correct horse battery
staple" (of course you shouldn't use *that* specific passphrase).

The passphrase consists of a sequence of words randomly selected from
the specified word list file.  Only words consisting entirely of ASCII
lower-case letters are considered.  The three command-line arguments
(following any options) are:

1. B<Either> a string of ASCII lowercase letters B<or> a decimal integer
  specifying the number of words;

2. The minimum length of each word; and

3. The maximum length of each word.

=head1 OPTIONS

All options may be abbreviated uniquely.  B<-help> may be abbreviated as B<-h>.

=over 4

=item B<-help>

Show short usage message

=item B<-help1>

Show medium usage message

=item B<-help2>

Show long usage message

=item B<-man>

Show long usage message using B<perldoc>, invokes pager

=item B<-[no]suffix>

B<-suffix>, the default, allows words ending in s, ed, and ing
(which are typically forms of other words).

B<-nosuffix> excludes such words.  This typically reduces the number of
available words by about half.  If you use this option, use B<-verbose>
to see the effects, and consider using more and/or longer words.

=item B<-verbose>

Show statistics about the strength of the passphrase

=item B<-dictionary I<file>>

Use specified word list  

Default is /usr/share/dict/words or $PASSPHRASE_DICT

=item B<-dev-random>

Use /dev/random rather than /dev/urandom

This can be much slower and is probably unnecessary.

=item B<-debugging>

Produce debugging output (developer option)

=back

=head1 SEE ALSO

B<gen-passphrase>, also part of the B<random-passwords> package.

L<https://github.com/Keith-S-Thompson/random-passwords>.

=head1 AUTHOR

Keith Thompson <Keith.S.Thompson@gmail.com>

=head1 LICENSE AND COPYRIGHT

B<random-passphrase> is released under GPL version 2 or later.

=cut
