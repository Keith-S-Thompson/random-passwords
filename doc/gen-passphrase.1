.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "GEN-PASSPHRASE 1"
.TH GEN-PASSPHRASE 1 "2020-07-23" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
gen\-passphrase \- Generate random passphrases
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
gen-passphrase [options] initials|word\-count min-len max-len
.PP
.Vb 5
\& Options:
\&    \-help       Show short usage message
\&    \-help1      Show medium usage message
\&    \-help2      Show long usage message
\&    \-man        Show long usage message (invokes pager)
\&
\&    \-[no]suffix       Allow/disallow words ending in s, ed, ing (enabled by default)
\&    \-verbose          Show statistics about the strength of the passphrase
\&    \-dictionary file  Use specified word list
\&                      Default is /usr/share/dict/words or $PASSPHRASE_DICT
\&    \-dev\-random       Use /dev/random rather than /dev/urandom (slow)
\&    \-debugging        Produce debugging output (developer option)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBgen-passphrase\fR generates random passphrases.
.PP
It is part of the \fBrandom-passwords\fR package, available at
.PP
<https://github.com/Keith\-S\-Thompson/random\-passwords>
.PP
More documentation is available there.
.PP
\&\fBgen-passphrase\fR was partly inspired by this \s-1XKCD\s0 cartoon: <http://xkcd.com/936/>,
which suggests using long passphrases consisting of randomly selected
English words.  The example in the cartoon was \*(L"correct horse battery
staple\*(R" (of course you shouldn't use *that* specific passphrase).
.PP
The passphrase consists of a sequence of words randomly selected from
the specified word list file.  Only words consisting entirely of \s-1ASCII\s0
lower-case letters are considered.  The three command-line arguments
(following any options) are:
.PP
1. \fBEither\fR a string of \s-1ASCII\s0 lowercase letters \fBor\fR a decimal integer
  specifying the number of words;
.PP
2. The minimum length of each word; and
.PP
3. The maximum length of each word.
.SH "OPTIONS"
.IX Header "OPTIONS"
All options may be abbreviated uniquely.  \fB\-help\fR may be abbreviated as \fB\-h\fR.
.IP "\fB\-help\fR" 4
.IX Item "-help"
Show short usage message
.IP "\fB\-help1\fR" 4
.IX Item "-help1"
Show medium usage message
.IP "\fB\-help2\fR" 4
.IX Item "-help2"
Show long usage message
.IP "\fB\-man\fR" 4
.IX Item "-man"
Show long usage message using \fBperldoc\fR, invokes pager
.IP "\fB\-[no]suffix\fR" 4
.IX Item "-[no]suffix"
\&\fB\-suffix\fR, the default, allows words ending in s, ed, and ing
(which are typically forms of other words).
.Sp
\&\fB\-nosuffix\fR excludes such words.  This typically reduces the number of
available words by about half.  If you use this option, use \fB\-verbose\fR
to see the effects, and consider using more and/or longer words.
.IP "\fB\-verbose\fR" 4
.IX Item "-verbose"
Show statistics about the strength of the passphrase
.IP "\fB\-dictionary \f(BIfile\fB\fR" 4
.IX Item "-dictionary file"
Use specified word list
.Sp
Default is /usr/share/dict/words or \f(CW$PASSPHRASE_DICT\fR
.IP "\fB\-dev\-random\fR" 4
.IX Item "-dev-random"
Use /dev/random rather than /dev/urandom
.Sp
This can be much slower and is probably unnecessary.
.IP "\fB\-debugging\fR" 4
.IX Item "-debugging"
Produce debugging output (developer option)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBgen-passphrase\fR, also part of the \fBrandom-passwords\fR package.
.PP
<https://github.com/Keith\-S\-Thompson/random\-passwords>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Keith Thompson <Keith.S.Thompson@gmail.com>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
\&\fBrandom-passphrase\fR is released under \s-1GPL\s0 version 2 or later.
